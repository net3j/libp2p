buildscript {
    /*
     This is a temporary work-around until BC-1.60 is taken out of beta and published.
     Step 1: Download the jar file locally: https://downloads.bouncycastle.org/betas/bcprov-jdk15on-161b20.jar
     Step 2: install it into your local maven repo with:
     mvn install:install-file -DgroupId=org.bouncycastle -DartifactId=bcprov-jdk15on -Dversion=161b20 -Dfile=/Users/sam/Downloads/bcprov-jdk15on-161b21.jar -Dtype=jar -Dpackaging=jar
     Don't forget to change the "file" argument to point to your download
     */
    ext.bouncycastleVersion = '1.62'
    ext.kotlin_version = '1.3.10'
    ext.kotlinMultiaddrVersion = '1.0.0'
    ext.kotlinMultihashVersion = '1.1.0'
    ext.nettyVersion = '4.1.33.Final'
    ext.protobufVersion = '3.6.1'
    ext.protocVersion = '3.0.0'
    ext.kethereumBase58Version = '0.66'
    ext.commonsCodecVersion = '1.11'
    ext.slf4jVersion = '1.7.25'
    ext.logbackVersion = '1.2.3'

    //test dependencies
    ext.junitVersion = '5.3.2'
    ext.mockitoKotlinVersion = '1.6.0'

    repositories { mavenCentral() }

    dependencies { classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3' }

}

plugins {
    id "com.jfrog.bintray" version "1.8.4"

    // Required for JFrog Artifactory repository
    id 'maven-publish'

    // Required for Maven Nexus repository
    id 'maven'
    id 'signing'
    id 'idea'

    id 'org.jetbrains.kotlin.jvm' version '1.3.20'
    id "com.diffplug.gradle.spotless" version "3.16.0"
}


apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven-publish'


allprojects {
    apply plugin: 'java'
    apply plugin: 'kotlin'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8",
                "org.slf4j:slf4j-api:$slf4jVersion"

        testCompile "org.junit.jupiter:junit-jupiter-engine:$junitVersion",
                "com.nhaarman:mockito-kotlin:$mockitoKotlinVersion",
                "ch.qos.logback:logback-classic:$logbackVersion"
    }

    compileKotlin { kotlinOptions.jvmTarget = "1.8" }
    compileTestKotlin { kotlinOptions.jvmTarget = "1.8" }

    apply plugin: 'com.diffplug.gradle.spotless'
    // see https://github.com/diffplug/spotless/tree/master/plugin-gradle
    spotless {
        kotlin {
            // This path needs to be relative to each project
            target fileTree('.') {
                include '**/*.kt'
                exclude '**/.gradle/**'
            }
            // see https://github.com/shyiko/ktlint#standard-rules
            ktlint().userData(['max_line_length': '120', 'insert_final_newline': 'true'])
            licenseHeaderFile "${rootDir}/gradle/spotless.java.license"  // License header file
        }

        groovyGradle {
            target '*.gradle'
            greclipse().configFile(rootProject.file('gradle/formatter.properties'))
            endWithNewline()
            paddedCell() // recommended hack to keep gradle files tidy
        }
    }

    test { useJUnitPlatform() }
}


configure(subprojects.each {}) {
    // Required for Maven Nexus repository
    apply plugin: 'maven'
    apply plugin: 'signing'

    // Required for JFrog Artifactory repository
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task testJar(type: Jar) {
        classifier = 'tests'
        from sourceSets.test.output
    }

    artifacts { archives sourcesJar, javadocJar, testJar }

    ext {
        ossrhUsername = project.hasProperty('ossrhUsername') ? project.property('ossrhUsername') : System.getenv('OSSRH_USERNAME')
        ossrhPassword = project.hasProperty('ossrhPassword') ? project.property('ossrhPassword') : System.getenv('OSSRH_PASSWORD')
        ossrhRepoUrl = project.hasProperty('ossrhRepoUrl') ? project.property('ossrhRepoUrl') : System.getenv('OSSRH_REPO_URL')
        bintrayUser = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
        bintrayKey = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
        bintrayGpgPassphrase = project.hasProperty('bintrayGpgPassphrase') ? project.property('bintrayGpgPassphrase') : System.getenv('BINTRAY_GPG_PASSPHRASE')
        isSnapshotVersion = project.version.endsWith("-SNAPSHOT")
        manualRelease = project.hasProperty('manualRelease') ? project.property('manualRelease').toBoolean() : false
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                artifact sourcesJar { classifier 'sources' }

                artifact testJar { classifier 'tests' }

                artifact javadocJar { classifier 'javadoc' }

                pom {
                    name = project.name
                    description = project.description
                    url = "https://github.com/web3j/libp2p"
                    licenses {
                        license {
                            name = "The Apache License, Version 2.0"
                            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                            distribution = "repo"
                        }
                    }
                    developers {
                        developer {
                            id = "conor10"
                            name = "Conor Svensson"
                            email = "conor10@gmail.com"
                        }
                    }
                    scm {
                        connection = "scm:git:https://github.com/web3j/libp2p.git"
                        developerConnection = "scm:git://github.com/web3j/libp2p.git"
                        url = "https://github.com/web3j/libp2p.git"
                    }
                }
            }
        }
    }

    uploadArchives {
        repositories {
            mavenDeployer {

                onlyIf {
                    // Only run if this is a manual release triggered by a user, or an automated release for snapshots.
                    // We don't need to run this for automated releases.
                    isSnapshotVersion && ossrhUsername != '' && ossrhPassword != '' && ossrhRepoUrl != ''
                }

                repository(url: ossrhRepoUrl) {
                    authentication(
                            userName: ossrhUsername,
                            password: ossrhPassword
                            )
                }

                pom.project {
                    name 'web3j-libp2p'
                    packaging 'jar'
                    description project.description
                    url 'https://web3j.io'

                    scm {
                        connection 'scm:git:https://github.com/web3j/libp2p.git'
                        url 'https://github.com/web3j/libp2p.git'
                        developerConnection 'scm:git://github.com/web3j/libp2p.git'
                    }

                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'conor10'
                            name 'Conor Svensson'
                            email 'conor10@gmail.com'
                        }
                    }
                }
            }
        }
    }

    bintray {
        user = bintrayUser
        key = bintrayKey
        publications = ['mavenJava']
        publish = true
        pkg {
            repo = 'maven'
            name = 'io.web3j'
            desc = project.description
            userOrg = 'web3j'
            licenses = ['Apache-2.0']
            issueTrackerUrl = 'https://github.com/web3j/libp2p/issues'
            vcsUrl = 'https://github.com/web3j/libp2p.git'
            websiteUrl = 'https://web3j.io'
            publicDownloadNumbers = true

            version {
                gpg {
                    sign = true
                    passphrase = bintrayGpgPassphrase
                }
                mavenCentralSync {
                    sync = true
                    user = ossrhUsername
                    password = ossrhPassword
                    close = '1'
                }
            }
        }
    }

    task release {
        dependsOn 'build'
        dependsOn 'uploadArchives'

        doLast {
            // Validates the user inputs before a release can be performed.
            if (isSnapshotVersion) {
                // Only need OSSRH details.
                logger.lifecycle("About to perform {} snapshot release ...", manualRelease ? "a manual" : "an automated")

                if (!ossrhUsername || !ossrhPassword || !ossrhRepoUrl) {
                    throw new InvalidUserDataException("Required parameters missing:  'ossrhUsername', 'ossrhPassword', 'ossrhRepoUrl'")
                }

                logger.lifecycle(" - ossrhUsername={}", ossrhUsername)
                logger.lifecycle(" - ossrhPassword={}", ossrhPassword ? "provided" : "not_provided")
                logger.lifecycle(" - ossrhRepoUrl={}", ossrhRepoUrl)
            } else {
                // Release => Need OSSRH and bintray.
                if (!ossrhUsername || !ossrhPassword || !ossrhRepoUrl) {
                    throw new InvalidUserDataException("Required parameters missing:  'ossrhUsername', 'ossrhPassword', 'ossrhRepoUrl'")
                }
                if (!bintrayUser || !bintrayKey || !bintrayGpgPassphrase) {
                    throw new InvalidUserDataException("Required parameters missing:  'bintrayUser', 'bintrayKey', 'bintrayGpgPassphrase'")
                }
                logger.lifecycle("About to perform {} full release ...", manualRelease ? "a manual" : "an automated")
                logger.lifecycle(" - ossrhUsername={}", ossrhUsername)
                logger.lifecycle(" - ossrhPassword={}", ossrhPassword ? "provided" : "not_provided")
                logger.lifecycle(" - ossrhRepoUrl={}", ossrhRepoUrl)
                logger.lifecycle(" - bintrayUser={}", bintrayUser)
                logger.lifecycle(" - bintrayKey={}", bintrayKey ? "provided" : "not_provided")
                logger.lifecycle(" - bintrayGpgPassphrase={}", bintrayGpgPassphrase ? "provided" : "not_provided")
            }
        }

        // Snapshots go to nexus, non-snapshots go to bintray.
        if (isSnapshotVersion) {
            dependsOn 'uploadArchives'
            tasks.findByName('uploadArchives').mustRunAfter 'build'
        } else {
            dependsOn 'bintrayUpload'
            tasks.findByName('bintrayUpload').mustRunAfter 'build'
        }
    }

    task jacocoRootTestReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
        dependsOn = subprojects.test
        additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
        classDirectories = files(subprojects.sourceSets.main.output)
        executionData = files(subprojects.jacocoTestReport.executionData)
        reports { xml.enabled = true }

        onlyIf = { true }

        doFirst {
            executionData = files(executionData.findAll { it.exists() })
        }

        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it,
                exclude: [
                    'org/web3j/abi/datatypes/generated/**',
                    'org/web3j/tuples/generated/**',
                    'org/web3j/ens/contracts/generated/**'
                ])
            })
        }
    }
}
